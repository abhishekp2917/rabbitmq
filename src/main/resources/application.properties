########################################################################################################################
# Specifies the port on which the server listens for HTTP requests.
# By setting it to "${PORT}", the server reads the PORT value from environment variables.
# This approach is useful in environments like cloud platforms, where the port might be dynamically assigned.

server.port=${PORT}



########################################################################################################################
# Host address of the RabbitMQ server
# Default hostname for connecting to RabbitMQ; typically "localhost" for local setups.

spring.rabbitmq.host=localhost



########################################################################################################################
# Port on which RabbitMQ server is listening
# Default port for RabbitMQ. Use 5672 for non-SSL and 5671 for SSL/TLS-secured connections.

spring.rabbitmq.port=5672



########################################################################################################################
# Username for authentication with RabbitMQ
# Default username provided by RabbitMQ. Should be replaced with a more secure user for production.

spring.rabbitmq.username=guest



########################################################################################################################
# Sets the password used to authenticate with the RabbitMQ broker.

spring.rabbitmq.password=guest



########################################################################################################################
# Specifies the virtual host to use when connecting to RabbitMQ. Virtual hosts allow multiple logical groupings within a single RabbitMQ instance.
# Here, it's set to "development" to isolate messages within the "development" environment.

spring.rabbitmq.virtual-host=development



########################################################################################################################
# Enables dynamic creation of queues, exchanges, and bindings at runtime.
# This allows the application to declare and manage RabbitMQ resources programmatically if needed.
# By default, this is set to "true" to enable dynamic creation.

spring.rabbitmq.dynamic=true



########################################################################################################################
# Determines the behavior when a queue defined in the application is missing on the RabbitMQ server.
# When set to "false", the application will not fail if a specified queue is missing.
# Instead, it will continue running, which can be useful for development or non-critical queues.

spring.rabbitmq.listener.missing-queues-fatal=false



########################################################################################################################
# This setting enables asynchronous Publisher Confirms with a ConfirmCallback for each message, allowing you to handle
# acknowledgments (ack) or negative acknowledgments (nack) when messages are published.

spring.rabbitmq.publisher-confirm-type=correlated



########################################################################################################################

# cloudamqp.com connection configuration
#spring.rabbitmq.host=puffin.rmq2.cloudamqp.com
#spring.rabbitmq.port=5671
#spring.rabbitmq.username=xmiyxjpp
#spring.rabbitmq.password=0dn6HlL7NUuqTM58kbDHkFYnRTOuEh92
#spring.rabbitmq.ssl.enabled=true
#spring.rabbitmq.ssl.algorithm=TLSv1.2
#spring.rabbitmq.virtual-host=xmiyxjpp
#spring.rabbitmq.dynamic=true
#spring.rabbitmq.listener.missing-queues-fatal=false






########################################################################################################################
# Enables retry mechanism for message consumption in the "simple" RabbitMQ listener container.
# When set to "true", if a message processing fails, it will automatically retry according to the defined strategy.
# It is to be noted that during the failed message retry attempts, other message in the queue couldn't be processed by the queue which is retrying

spring.rabbitmq.listener.simple.retry.enabled=true



########################################################################################################################
# Sets the maximum number of retry attempts when message processing fails.
# Here, it is set to "4", meaning it will retry up to 4 times before failing definitively.

spring.rabbitmq.listener.simple.retry.max-attempts=4



########################################################################################################################
# Specifies the initial interval (in milliseconds) between retry attempts.
# The first retry will occur after a delay of "1000" ms (1 second).

spring.rabbitmq.listener.simple.retry.initial-interval=1000



########################################################################################################################
# Defines the maximum interval (in milliseconds) between retry attempts.
# The interval will grow up to "10000" ms (10 seconds) in subsequent retries.

spring.rabbitmq.listener.simple.retry.max-interval=10000



########################################################################################################################
# Sets the multiplier for the delay between retries.
# After each failed attempt, the retry interval will be multiplied by "2.0", causing an exponential backoff.

spring.rabbitmq.listener.simple.retry.multiplier=2.0






